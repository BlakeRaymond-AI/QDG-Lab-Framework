PAT Experimental Framework

Goals:
	- Establish clear seperation between device control and experimental runs.
	- Simplify the addition of new devices into the framework.
	- Prevent dictionary swelling. Settings dictionary should only be
		be controlling default values and not defining experimental run paths.
		Current usage as a controller to run experimental paths is dangerous.
		Rather than relying on a call path defined through settings, write a 
		script that does what you want explicitly.
	


Recipe <<Class>>
	Desc: Provides functionality for communicating with UTBus devices.
	Extends: None

PATController <<Class>>
	Desc: Consolidates all parts of controlling the PAT experimental apparatus.
	Equivalencies: Contains high-level functions defined in Master_Recipe. 
		Settings_Module is consolidated inside of this controller. Individual
		device settings are now device controllers stored in a list and global
		settings are accessed through the Settings class.
	Extends: None
	Contents:
		- Settings
		- MagneticFieldController
		- LaserController
		- SaveController
		- DeviceController 
		
Settings <<Class>>
	Desc: Module containing the function used to access, build and modify
			the settings dictionary.
	Contents:
		- SettingsDict		
		
DefaultSettings <<Dictionary>>
	Desc: Module containing a dictionary with default values with which to
			create PAT Controller. Contains all settings for all devices, 
			components and subsystem within the PAT Apparatus.
		
OverwriteSettings <<Dictionary
	Desc: Module containing a dictionary with the values that are to be 
			overwritten in the Pat Controller	

SaveController <<Class>>
	Desc: Handles the creation of directories required for saving data. Paths
			should have the general form of Date/Time_ExpName/DeviceName to make
			it easy to catalog and find data. Each individual device should 
			simply have to save the data to the directory passed to it via the
			DeviceController save() method.
			

MagneticFieldController <<Class>>
	Desc: Handles the PAT Magnetic Field subsystem.
	Extends: Recipe 

DeviceControllerMediator <<Interface>
	Desc: A common interface which all device mediators must subclass. Prototypes common
			methods that all device mediators must implement [ie. start(), save()]. 
			Pixelink, PointGrey, Tekscope are all examples of devices that would
			extend this. Every device would also have a corresponding settings
			dictionary with the main settings dictiory  
	Equivalencies: Device settings from Settings_Module
	Methods:
		- save(path, devSettings): Saves device data to new folder based 
									on the path. 
		- start(): Runs the necessary commands to initialise device.
	Notes: Monkey patching can be used on existing controllers to consolidate
			existing functionality.
	
Devices are not imported directly into the PAT apparatus. Devices controllers
should be built to work independently of any framework (ie. No reliance on 
input dictionaries). Device mediators will instead be used. Eeach will contain
an instance of a device controller and have methods to do what needs to be done. 	
	
	
PointGreyController
	Desc: Provides control over the desired Flea2 functionality.

	
Use Case
	A script to do Science would work as follows:
1. Pull in the DefaultSettings dictionary.
2. Overwrite the DefaultSettings dictionary with the OverwriteSettings dictionary.
3. Create a PATController class with the overwritten settings.
4. Pass the PATController object to the Sequence function.
5. ???
6. Profit
